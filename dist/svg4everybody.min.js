!function(a,b){"function"==typeof define&&define.amd?
// AMD. Register as an anonymous module unless amdModuleId is set
define([],function(){return a.svg4everybody=b()}):"object"==typeof exports?module.exports=b():a.svg4everybody=b()}(this,function(){/*! svg4everybody v2.1.0 | github.com/jonathantneal/svg4everybody */
function a(a,b){
// if the target exists
if(b){
// import the target
var c=b.cloneNode(!0);if("symbol"===b.nodeName.toLowerCase()){var e=d(a),f=!e.hasAttribute("viewBox")&&b.getAttribute("viewBox");
// conditionally set the viewBox on the svg
f&&e.setAttribute("viewBox",f);
// copy the contents of the clone into the fragment
for(
// create a document fragment to hold the contents of the target
var g=document.createDocumentFragment();c.childNodes.length;)g.appendChild(c.firstChild);
// append the fragment into the svg
a.appendChild(g)}else
// remove the id to keep the document valid
c.removeAttribute("id"),a.appendChild(c)}}function b(b){
// listen to changes in the request
b.onreadystatechange=function(){
// if the request is ready
if(4===b.readyState){
// get the cached html document
var c=b._cachedDocument;
// ensure the cached html document based on the xhr response
c||(c=b._cachedDocument=document.implementation.createHTMLDocument(""),c.body.innerHTML=b.responseText,b._cachedTarget={}),
// clear the xhr embeds list and embed each item
b._embeds.splice(0).map(function(d){
// get the cached target
var e=b._cachedTarget[d.id];
// ensure the cached target
e||(e=b._cachedTarget[d.id]=c.getElementById(d.id)),
// embed the target into the svg
a(d.node,e)})}},
// test the ready state change immediately
b.onreadystatechange()}function c(c){function e(){
// while the index exists in the live <use> collection
for(
// get the cached <use> index
var c=0;c<m.length;){
// get the current <use>
var h=m[c],i=h.parentNode,j=d(i);if(j){var n=h.getAttribute("xlink:href");if(f&&(!g.validate||g.validate(n,j,h))){
// remove the <use> element
i.removeChild(h);
// parse the src and get the url and id
var o=n.split("#"),p=o.shift(),q=o.join("#");
// if the link is external
if(p.length){
// get the cached xhr request
var r=k[p];
// ensure the xhr request exists
r||(r=k[p]=new XMLHttpRequest,r.open("GET",p),r.send(),r._embeds=[]),
// add the svg and id as an item to the xhr embeds list
r._embeds.push({node:i,id:q}),
// prepare the xhr ready state change event
b(r)}else
// embed the local id into the svg
a(i,document.getElementById(q))}}else
// increase the index when the previous value was not "valid"
++c}
// continue the interval
l(e,67)}var f,g=Object(c),h=/\bTrident\/[567]\b|\bMSIE (?:9|10)\.0\b/,i=/\bAppleWebKit\/(\d+)\b/,j=/\bEdge\/12\.(\d+)\b/;f="polyfill"in g?g.polyfill:h.test(navigator.userAgent)||(navigator.userAgent.match(j)||[])[1]<10547||(navigator.userAgent.match(i)||[])[1]<537;
// create xhr requests object
var k={},l=window.requestAnimationFrame||setTimeout,m=document.getElementsByTagName("use");
// conditionally start the interval if the polyfill is active
f&&e()}function d(a){for(var b=a;"svg"!==b.nodeName.toLowerCase()&&(b=b.parentNode););return b}return c});